#!/bin/bash

# Copyright (c) 2017-2024 SUSE Linux GmbH
#
# This file is part of cloud-netconfig.
#
# cloud-netconfig is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cloud-netconfig is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License

METADATA_BASE_URL="http://169.254.169.254/metadata/instance/network/interface/"
URL_HDR="Metadata:true"
URL_APX='?format=text&api-version=2017-04-02'
CURL="curl -m 3 --noproxy 169.254.169.254 -s -H $URL_HDR"
LOG_CURL="logger -t cloud-netconfig -e"

# -------------------------------------------------------------------
# look up a meta data item
#
get_from_metadata()
{
    local url="${METADATA_BASE_URL}${1}${URL_APX}"
    local count=0 result response_file
    response_file=$(mktemp /tmp/cn-response.XXXXXX) || return 1
    result=$($CURL -D $response_file $url 2> >($LOG_CURL)) || return 1

    while [[ $result == "Too many requests" ]]; do
        count=$((count+1))
        if [[ $count -gt 10 ]]; then
            return 1
        fi
        sleep 0.5
        result=$($CURL -D $response_file $url 2> >($LOG_CURL)) || return 1
    done

    local http_ver http_code text
    read http_ver http_code text < $response_file
    rm $response_file
    if [[ $http_code == 200 ]]; then
        echo -n $result
        return 0
    else
        logger -t cloud-netconfig "Error: metadata server returned $http_code"
        test -n "$result" && logger -t cloud-netconfig "Response: $result"
        return 1
    fi
}


# -------------------------------------------------------------------
# get the MAC address from the metadata server
# format is uppercase without semicolons
#
get_iface_mac()
{
    local if_idx="$1"
    test -z "$if_idx" && return

    get_from_metadata "${if_idx}/macAddress"
    return $?
}

# -------------------------------------------------------------------
# gets all IPv4 address from the Azure metadata server for given
# interface index
#
get_ipv4_addresses_by_index()
{
    local if_idx="$1" count=0 prefixlen="$2" indices
    test -z "$if_idx" && return

    indices=$(get_from_metadata "${if_idx}/ipv4/ipAddress") || return 1
    for idx in $indices ; do
        [[ $count -ge 1 ]] && echo -n " "
        get_from_metadata "${if_idx}/ipv4/ipAddress/${idx}privateIpAddress" || return 1
        echo -n "/"
        get_from_metadata "${if_idx}/ipv4/subnet/0/prefix" || return 1
        count=$((count+1))
    done
}

# -------------------------------------------------------------------
# get IPv4 addresses from the Azure metadata server and return them
#
get_ipv4_addresses_from_metadata()
{
    local idx indices hwaddr="$1"
    test -z "$hwaddr" && return 1

    local oldopt=$(shopt -p nocasematch)
    shopt -s nocasematch
    indices=$(get_from_metadata) || return 1
    for idx in $indices ; do
        if [[ "$(get_iface_mac ${idx%/*})" == "${hwaddr//:/}" ]]; then
            get_ipv4_addresses_by_index ${idx%/*} || return 1
        fi
    done
    eval "$oldopt"
}

# -------------------------------------------------------------------
# dummy, no IP ranges in Azure
#
get_ipv4_ranges_from_metadata()
{
    return 0
}

# -------------------------------------------------------------------
# dummy, no gateway information in metadata
#
get_gateway_from_metadata()
{
    return 0
}

# -------------------------------------------------------------------
# check whether metadata server is available
# 
metadata_available()
{
    local resp=$($CURL "http://169.254.169.254/metadata/instance/${URL_APX}" 2>/dev/null)
    [[ "$resp" == *network/* ]]
    return $?
}

